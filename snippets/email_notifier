class EmailNotifier
  attr_accessor :emails
  attr_writer :from
  
  def initialize(project = nil)
    @emails = []
  end

  def from
    @from || Configuration.email_from
  end

  def build_finished(build)
    return if @emails.empty? or not build.failed?
    email :deliver_build_report, build, "#{build.project.name} build #{build.label} failed", "The build failed."
  end

  def build_fixed(build, previous_build)
    return if @emails.empty?
    email :deliver_build_report, build, "#{build.project.name} build #{build.label} fixed", "The build has been fixed."
  end
  
  private
  
  def email(template, build, *args)
    BuildMailer.send(template, build, @emails, from, *args)
    CruiseControl::Log.event("Sent e-mail to #{@emails.size == 1 ? "1 person" : "#{@emails.size} people"}", :debug)
  rescue => e
    settings = ActionMailer::Base.smtp_settings.map { |k,v| "  #{k.inspect} = #{v.inspect}" }.join("\n")
    CruiseControl::Log.event("Error sending e-mail - current server settings are :\n#{settings}", :error)
    raise
  end

end

Project.plugin :email_notifier
